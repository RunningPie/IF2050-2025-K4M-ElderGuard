plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.14'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'org.elderguard'
version = '1.0'
sourceCompatibility = '21'

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()
}

dependencies {
    implementation 'org.openjfx:javafx-controls:21.0.2'
    implementation 'org.openjfx:javafx-fxml:21.0.2'
    // Include JavaFX base and graphics modules explicitly
    implementation 'org.openjfx:javafx-base:21.0.2'
    implementation 'org.openjfx:javafx-graphics:21.0.2'
    
    implementation "org.postgresql:postgresql:42.7.3"
    implementation 'io.github.cdimascio:java-dotenv:5.2.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.17.1'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.17.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation 'org.testfx:testfx-junit5:4.0.16-alpha'
    testImplementation 'org.mockito:mockito-core:5.6.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
}

application {
    mainClass = 'app.Launcher'
}

javafx {
    version = "21.0.2"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.base', 'javafx.graphics' ]
}

// Configure the shadowJar task for JavaFX
shadowJar {
    archiveBaseName = 'elderguard'
    archiveVersion = '1.0'
    archiveClassifier = ''
    
    // Merge service files properly
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer)
    
    // Handle duplicate files
    mergeServiceFiles()
    
    // Set the manifest for the fat JAR
    manifest {
        attributes(
            'Main-Class': 'app.Launcher',
            'Multi-Release': 'true',
            'JavaFX-Application-Class': 'app.Launcher'
        )
    }
    
    // Exclude signature files that can cause issues
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'  
    exclude 'META-INF/*.RSA'
    exclude 'module-info.class'
    
    // Don't create automatic module names that could conflict
    exclude 'META-INF/MANIFEST.MF'
    
    // Ensure JavaFX modules are included
    configurations = [project.configurations.runtimeClasspath]
    
    // Prevent module issues by ensuring it runs in classpath mode
    doLast {
        println "Shadow JAR created: ${archiveFile.get().asFile}"
    }
}