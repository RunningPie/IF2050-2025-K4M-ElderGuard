plugins {
    id 'java'
    id 'application'
    // Use the official plugin ID for the JavaFX plugin
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'org.elderguard'
version = '1.0'
sourceCompatibility = '21'

repositories {
    mavenCentral()
}

// Add platform-specific dependencies for JavaFX
def platform = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem
if (platform.isWindows()) {
    project.ext.platform = 'win'
} else if (platform.isLinux()) {
    project.ext.platform = 'linux'
} else if (platform.isMacOsX()) {
    project.ext.platform = 'mac'
}


dependencies {
    // Make dependencies specific to the platform
    implementation "org.openjfx:javafx-controls:21.0.2"
    implementation "org.openjfx:javafx-fxml:21.0.2"
    implementation "org.openjfx:javafx-base:21.0.2"
    implementation "org.openjfx:javafx-graphics:21.0.2:${project.platform}"

    implementation "org.postgresql:postgresql:42.7.3"
    implementation 'io.github.cdimascio:java-dotenv:5.2.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.17.1'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.17.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation 'org.testfx:testfx-junit5:4.0.16-alpha'
    testImplementation 'org.mockito:mockito-core:5.6.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
}

application {
    mainClass = 'app.Launcher'
}

javafx {
    version = "21.0.2"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.graphics' ]
}

shadowJar {
    // This is the critical fix.
    // The ServiceFileTransformer correctly merges the service files from the JavaFX native libraries,
    // allowing the application to find the correct "Glass" platform factory at runtime.
    transformers.withType(com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer) {
        it.path = 'META-INF/services'
        it.include 'com.sun.glass.ui.PlatformFactory'
        it.include 'com.sun.javafx.tk.Toolkit'
        it.include 'com.sun.javafx.application.PlatformImpl'
    }
    
    archiveClassifier.set('all') // Creates a file like 'elderguard-1.0-all.jar'
    manifest {
        attributes 'Main-Class': 'app.Launcher'
    }
}
